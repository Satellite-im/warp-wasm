/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_warpipfs_free(a: number): void;
export function warpipfs_new_wasm(a: number, b: number): number;
export function __wbg_config_free(a: number): void;
export function config_development(): number;
export function config_testing(): number;
export function config_minimal_testing(): number;
export function __wbg_asynciterator_free(a: number): void;
export function asynciterator_next(a: number): number;
export function __wbg_promiseresult_free(a: number): void;
export function __wbg_get_promiseresult_done(a: number): number;
export function __wbg_set_promiseresult_done(a: number, b: number): void;
export function promiseresult_new(a: number): number;
export function promiseresult_value(a: number): number;
export function __wbg_warpinstance_free(a: number): void;
export function warpinstance_multipass(a: number): number;
export function warpinstance_raygun(a: number): number;
export function warpinstance_constellation(a: number): number;
export function __wbg_constellationbox_free(a: number): void;
export function __wbg_tesseract_free(a: number): void;
export function tesseract_new(): number;
export function tesseract_set_autosave(a: number): void;
export function tesseract_autosave_enabled(a: number): number;
export function tesseract_disable_key_check(a: number): void;
export function tesseract_enable_key_check(a: number): void;
export function tesseract_is_key_check_enabled(a: number): number;
export function tesseract_exist(a: number, b: number, c: number): number;
export function tesseract_clear(a: number): void;
export function tesseract_is_unlock(a: number): number;
export function tesseract_lock(a: number): void;
export function tesseract_set(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function tesseract_retrieve(a: number, b: number, c: number, d: number): void;
export function tesseract_update_unlock(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function tesseract__delete(a: number, b: number, c: number, d: number): void;
export function tesseract_unlock(a: number, b: number, c: number, d: number): void;
export function tesseract_save(a: number, b: number): void;
export function tesseract_subscribe(a: number): number;
export function tesseract_load_from_storage(a: number, b: number): void;
export function generate_name(a: number): void;
export function __wbg_raygunbox_free(a: number): void;
export function __wbg_multipassbox_free(a: number): void;
export function multipassbox_create_identity(a: number, b: number, c: number, d: number, e: number): number;
export function multipassbox_get_identity(a: number, b: number, c: number): number;
export function multipassbox_get_own_identity(a: number): number;
export function multipassbox_update_identity(a: number, b: number, c: number): number;
export function multipassbox_multipass_subscribe(a: number): number;
export function multipassbox_send_request(a: number, b: number, c: number): number;
export function multipassbox_accept_request(a: number, b: number, c: number): number;
export function multipassbox_deny_request(a: number, b: number, c: number): number;
export function multipassbox_close_request(a: number, b: number, c: number): number;
export function multipassbox_received_friend_request_from(a: number, b: number, c: number): number;
export function multipassbox_list_incoming_request(a: number): number;
export function multipassbox_sent_friend_request_to(a: number, b: number, c: number): number;
export function multipassbox_list_outgoing_request(a: number): number;
export function multipassbox_remove_friend(a: number, b: number, c: number): number;
export function multipassbox_block(a: number, b: number, c: number): number;
export function multipassbox_unblock(a: number, b: number, c: number): number;
export function multipassbox_block_list(a: number): number;
export function multipassbox_is_blocked(a: number, b: number, c: number): number;
export function multipassbox_list_friends(a: number): number;
export function multipassbox_has_friend(a: number, b: number, c: number): number;
export function __wbg_multipasseventkind_free(a: number): void;
export function multipasseventkind_kind(a: number): number;
export function multipasseventkind_did(a: number, b: number): void;
export function __wbg_identityprofile_free(a: number): void;
export function identityprofile_new(a: number, b: number, c: number): number;
export function identityprofile_identity(a: number): number;
export function identityprofile_set_identity(a: number, b: number): void;
export function identityprofile_passphrase(a: number, b: number): void;
export function __wbg_identity_free(a: number): void;
export function identity_set_username(a: number, b: number, c: number): void;
export function identity_set_status_message(a: number, b: number, c: number): void;
export function identity_set_short_id(a: number, b: number, c: number): void;
export function identity_set_did_key(a: number, b: number, c: number): void;
export function identity_set_created(a: number, b: number): void;
export function identity_set_modified(a: number, b: number): void;
export function identity_username(a: number, b: number): void;
export function identity_status_message(a: number, b: number): void;
export function identity_short_id(a: number, b: number): void;
export function identity_did_key(a: number, b: number): void;
export function identity_created(a: number): number;
export function identity_modified(a: number): number;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function wasm_bindgen__convert__closures__invoke1_mut__h7e720ea2de1100e2(a: number, b: number, c: number): void;
export function wasm_bindgen__convert__closures__invoke0_mut__he0d675b39a8399d4(a: number, b: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h851ad40956bf89b2(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h49ca63d0fff4466a(a: number, b: number, c: number): void;
export function wasm_bindgen__convert__closures__invoke1_mut__hff0f2176ee60027f(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__ha0ad73238c4670f6(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hfad670430282ef40(a: number, b: number, c: number): void;
export function wasm_bindgen__convert__closures__invoke0_mut__h7898784814d5d2ca(a: number, b: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h050f17ebdb2912c6(a: number, b: number, c: number, d: number): void;
